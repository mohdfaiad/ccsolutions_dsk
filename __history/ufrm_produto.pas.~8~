unit ufrm_produto;

interface

uses
  Winapi.Windows,
  Winapi.Messages,

  System.SysUtils,
  System.Variants,
  System.Classes,
  System.Actions,
  System.ImageList,

  Vcl.ActnList,
  Vcl.ImgList,
  Vcl.Mask,
  Vcl.DBCtrls,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.StdCtrls,
  Vcl.ExtCtrls,
  Vcl.ComCtrls,
  Vcl.ToolWin,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.Menus,

  Data.DB,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.Client,
  FireDAC.Comp.DataSet,

  ACBrBase,
  ACBrEnterTab,

  uDWAbout,
  uRESTDWPoolerDB,
  uDWConstsData,

  ufrm_form_default,
  ufrm_dm;

type
  Tfrm_produto = class(Tfrm_form_default)
    clientSQLpro_codigo: TStringField;
    clientSQLusuario_usr_codigo: TStringField;
    clientSQLpro_id: TLongWordField;
    clientSQLpro_tipo: TStringField;
    clientSQLpro_nome: TStringField;
    clientSQLpro_descricao: TMemoField;
    clientSQLpro_data_deletado: TDateTimeField;
    clientSQLpro_data_registro: TDateTimeField;
    dbedt_pro_nome: TDBEdit;
    Label3: TLabel;
    dbmem_pro_descricao: TDBMemo;
    Label4: TLabel;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Action_salvarExecute(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frm_produto: Tfrm_produto;

implementation

{$R *.dfm}

procedure Tfrm_produto.Action_salvarExecute(Sender: TObject);
var
  storedProcInsert, storedProcUpdate : TFDStoredProc;
begin
  case ds.State of
    dsEdit:
      try
        try
          if Application.MessageBox('Ao Salvar as alterações, as informações antigas não poderão ser recuperadas!', 'Deseja Salvar as Alterações?', MB_YESNO + MB_ICONINFORMATION + MB_DEFBUTTON2) = IDYES then begin
            storedProcUpdate := TFDStoredProc.Create(Self);
            storedProcUpdate.Connection := frm_dm.connDB;
            storedProcUpdate.StoredProcName := 'proc_contrato_update';
            storedProcUpdate.Prepare;
            storedProcUpdate.ParamByName('p_usuario_usr_token').AsString  := frm_dm.usuario_usr_token;
            storedProcUpdate.ParamByName('p_ctr_codigo').AsString         := clientSQLctr_codigo.AsString;
            storedProcUpdate.ParamByName('p_cliente_cli_codigo').AsString := sqlcliente.FieldByName('cli_codigo').AsString;
            storedProcUpdate.ParamByName('p_revenda_rev_codigo').AsString := sqlrevenda.FieldByName('rev_codigo').AsString;
            storedProcUpdate.ParamByName('p_ctr_valor').AsFloat           := StrToFloat(dbedt_ctr_valor.Text);
            storedProcUpdate.ParamByName('p_ctr_data_contrato').AsDate    := StrToDate(dbedt_ctr_data_contrato.Text);
            storedProcUpdate.ParamByName('p_ctr_data_assinatura').AsDate  := StrToDate(dbedt_ctr_data_assinatura.Text);
            storedProcUpdate.ExecProc;

            afterUpdate;
          end else begin
            ds.DataSet.Cancel;
          end;
        except on E: Exception do
          ShowMessage('Erro Update: ' + E.Message);
        end;
      finally
      end;

    dsInsert:
      try
        try
          storedProcInsert := TFDStoredProc.Create(Self);
          storedProcInsert.Connection := frm_dm.connDB;
          storedProcInsert.StoredProcName := 'proc_contrato_create';
          storedProcInsert.Prepare;
          storedProcInsert.ParamByName('p_usuario_usr_token').AsString  := frm_dm.usuario_usr_token;
          storedProcInsert.ParamByName('p_cliente_cli_codigo').AsString := sqlcliente.FieldByName('cli_codigo').AsString;
          storedProcInsert.ParamByName('p_revenda_rev_codigo').AsString := sqlrevenda.FieldByName('rev_codigo').AsString;
          storedProcInsert.ParamByName('p_ctr_valor').AsFloat           := StrToFloat(dbedt_ctr_valor.Text);
          storedProcInsert.ParamByName('p_ctr_data_contrato').AsDate    := StrToDate(dbedt_ctr_data_contrato.Text);
          storedProcInsert.ParamByName('p_ctr_data_assinatura').AsDate  := StrToDate(dbedt_ctr_data_assinatura.Text);
          storedProcInsert.ExecProc;

          afterInsert;
        except on E: Exception do
          ShowMessage('Error Inserir: ' + E.Message);
        end;
      finally
      end;
  end;
end;

procedure Tfrm_produto.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  frm_produto.Destroy;
  frm_produto := Nil;
end;

end.
