unit ufrm_usuario;

interface

uses
  Winapi.Windows,
  Winapi.Messages,

  System.SysUtils,
  System.Variants,
  System.Classes,
  System.Actions,
  System.ImageList,

  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ActnList,
  Vcl.ImgList,
  Vcl.StdCtrls,
  Vcl.Buttons,
  Vcl.ExtCtrls,
  Vcl.Mask,
  Vcl.DBCtrls,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.ComCtrls,
  Vcl.Menus,
  Vcl.ToolWin,

  Data.DB,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Param,
  FireDAC.Stan.Error,
  FireDAC.DatS,
  FireDAC.Phys.Intf,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.Client,
  FireDAC.Comp.DataSet,

  ACBrBase,
  ACBrEnterTab,

  uDWAbout,
  uRESTDWPoolerDB,
  uDWConstsData,

  ufrm_form_default,
  ufrm_dm;

type
  Tfrm_usuario = class(Tfrm_form_default)
    clientSQLusr_id: TStringField;
    clientSQLusr_codigo: TStringField;
    clientSQLusr_token: TStringField;
    clientSQLusr_email: TStringField;
    clientSQLusr_telefone: TStringField;
    clientSQLusr_data_deletado: TDateTimeField;
    clientSQLusr_data_registro: TDateTimeField;
    clientSQLusr_status: TShortintField;
    DBEdit1: TDBEdit;
    Label3: TLabel;
    DBEdit2: TDBEdit;
    Label4: TLabel;
    clientSQLusr_nome: TStringField;
    DBEdit3: TDBEdit;
    Label5: TLabel;
    DBEdit4: TDBEdit;
    Label6: TLabel;
    clientSQLusr_data_nascimento: TDateField;
    DBEdit5: TDBEdit;
    Label7: TLabel;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Action_salvarExecute(Sender: TObject);
  private
    procedure afterInsert;
    procedure afterUpdate;
    procedure usuario_read(AToken: String);

  public

  end;

var
  frm_usuario: Tfrm_usuario;

implementation

{$R *.dfm}

{ Tfrm_form_default1 }

procedure Tfrm_usuario.Action_salvarExecute(Sender: TObject);
var
  storedProcInsert, storedProcUpdate : TFDStoredProc;
begin
  case ds.State of
    dsEdit:
      try
        try
          if Application.MessageBox('Ao Salvar as alterações, as informações antigas não poderão ser recuperadas!', 'Deseja Salvar as Alterações?', MB_YESNO + MB_ICONINFORMATION + MB_DEFBUTTON2) = IDYES then begin
            storedProcUpdate := TFDStoredProc.Create(Self);
            storedProcUpdate.Connection := frm_dm.connDB;
            storedProcUpdate.StoredProcName := 'proc_cliente_update';
            storedProcUpdate.Prepare;
            storedProcUpdate.ParamByName('p_usuario_usr_token').AsString  := frm_dm.usuario_usr_token;
            storedProcUpdate.ParamByName('p_cli_codigo').AsString         := clientSQLcli_codigo.AsString;
            storedProcUpdate.ParamByName('p_cli_nome').AsString           := dbedt_cli_nome.Text;
            storedProcUpdate.ParamByName('p_cli_nome_fantasia').AsString  := dbedt_cli_nome_fantasia.Text;
            storedProcUpdate.ParamByName('p_cli_tipo').AsString           := dbcmb_cli_tipo.Text;
            storedProcUpdate.ParamByName('p_cli_rgie').AsString           := dbedt_cli_rgie.Text;
            storedProcUpdate.ParamByName('p_cli_cpfcnpj').AsString        := dbedt_cli_cpfcnpj.Text;
            storedProcUpdate.ParamByName('p_cli_im').AsString             := dbedt_cli_im.Text;
            storedProcUpdate.ParamByName('p_cli_suframa').AsString        := dbedt_cli_suframa.Text;
            storedProcUpdate.ParamByName('p_cli_data').AsDate             := StrToDate(dbedt_cli_data.Text);
            storedProcUpdate.ParamByName('p_cli_status').AsShortInt       := valorBoolean(dbchkbox_cli_status);
            storedProcUpdate.ExecProc;

            afterUpdate;
          end else begin
            ds.DataSet.Cancel;
          end;
        except on E: Exception do
          ShowMessage('Erro Update: ' + E.Message);
        end;
      finally
      end;

    dsInsert:
      try
        try
          storedProcInsert := TFDStoredProc.Create(Self);
          storedProcInsert.Connection := frm_dm.connDB;
          storedProcInsert.StoredProcName := 'proc_cliente_create';
          storedProcInsert.Prepare;
          storedProcInsert.ParamByName('p_usuario_usr_token').AsString  := frm_dm.usuario_usr_token;
          storedProcInsert.ParamByName('p_cli_nome').AsString           := dbedt_cli_nome.Text;
          storedProcInsert.ParamByName('p_cli_nome_fantasia').AsString  := dbedt_cli_nome_fantasia.Text;
          storedProcInsert.ParamByName('p_cli_tipo').AsString           := dbcmb_cli_tipo.Text;
          storedProcInsert.ParamByName('p_cli_rgie').AsString           := dbedt_cli_rgie.Text;
          storedProcInsert.ParamByName('p_cli_cpfcnpj').AsString        := dbedt_cli_cpfcnpj.Text;
          storedProcInsert.ParamByName('p_cli_im').AsString             := dbedt_cli_im.Text;
          storedProcInsert.ParamByName('p_cli_suframa').AsString        := dbedt_cli_suframa.Text;
          storedProcInsert.ParamByName('p_cli_data').AsDate             := StrToDate(dbedt_cli_data.Text);
          storedProcInsert.ParamByName('p_cli_status').AsShortInt       := valorBoolean(dbchkbox_cli_status);
          storedProcInsert.ExecProc;

          afterInsert;
        except on E: Exception do
          ShowMessage('Error Inserir: ' + E.Message);
        end;
      finally
      end;
  end;
end;

procedure Tfrm_usuario.afterInsert;
begin
  ShowMessage('Registro Inserido com Sucesso');
  TabSheet_dados.Show;
  ds.DataSet.Last;
end;

procedure Tfrm_usuario.afterUpdate;
begin
  ShowMessage('Registro Atualizado com sucesso');
  TabSheet_dados.Show;
end;

procedure Tfrm_usuario.usuario_read(AToken: String);
var
  SQL: String;
begin
  inherited;
  SQL := 'call proc_usuario_read('+QuotedStr(AToken) +');';

  clientSQL.Active    := False;
  clientSQL.DataBase  := frm_dm.database;
  clientSQL.SQL.Clear;
  clientSQL.SQL.Text  := SQL;
  clientSQL.Active    := True
end;

procedure Tfrm_usuario.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  frm_usuario.Destroy;
  frm_usuario := Nil;
end;

procedure Tfrm_usuario.FormShow(Sender: TObject);
begin
  inherited;
  usuario_read(frm_dm.usuario_usr_token);
end;

end.
